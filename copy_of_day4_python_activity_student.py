# -*- coding: utf-8 -*-
"""Copy of Day4_Python_Activity_Student.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-mMru_uTm0fPK8fI1JxA4Yk3h--slhoi

# Pandas, Matplotlib and Seaborn
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

"""[Dataset Soruce](https://www.kaggle.com/datasets/rajkumarpandey02/gdp-in-usd-per-capita-income-by-country)

CONTENT
<p>The figures presented here do not take into account differences in the cost of living in different countries, and the results vary greatly from one year to another based on fluctuations in the exchange rates of the country's currency. Such fluctuations change a country's ranking from one year to the next, even though they often make little or no difference to the standard of living of its population.

GDP per capita is often considered an indicator of a country's standard of living; however, this is inaccurate because GDP per capita is not a measure of personal income.

Comparisons of national income are also frequently made on the basis of purchasing power parity (PPP), to adjust for differences in the cost of living in different countries. (See List of countries by GDP (PPP) per capita.) PPP largely removes the exchange rate problem but not others; it does not reflect the value of economic output in international trade, and it also requires more estimation than GDP per capita. On the whole, PPP per capita figures are more narrowly spread than nominal GDP per capita figures.</p>

Here are some resources to learn about GDP:
#### [World Bank](https://data.worldbank.org/indicator/ny.gdp.pcap.cd?most_recent_value_desc=false)
#### [Our World in Data](https://ourworldindata.org/grapher/gdp-per-capita-worldbank)
#### [IMF](https://www.imf.org/external/datamapper/NGDPD@WEO/OEMDC/ADVEC/WEOWORLD)
#### [UN Data](https://data.un.org/Data.aspx?d=SNAAMA&f=grID%3A101%3BcurrID%3AUSD%3BpcFlag%3A1)
"""





df = pd.read_csv("/content/drive/MyDrive/JustIT_Python/pandas/Resources/Copy of GDP (nominal) per Capita.csv",encoding= 'unicode_escape',  index_col=0)

"""## EDA (Exploratory Data Analysis)

### Use this section to explore and inspect dataset.
"""

df[["Country/Territory", "UN_Region"]]

from matplotlib import pyplot as plt
_df_12['WorldBank_Estimate'].plot(kind='line', figsize=(8, 4), title='WorldBank_Estimate')
plt.gca().spines[['top', 'right']].set_visible(False)

from matplotlib import pyplot as plt
import seaborn as sns
df.groupby('UN_Region').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

# prompt: make a barchart with lined background and looks beautiful

import matplotlib.pyplot as plt
import seaborn as sns

# Assuming 'df' is your DataFrame and 'UN_Region' column exists
# Create the bar chart with a lined background
plt.figure(figsize=(10, 6))  # Adjust figure size as needed

# Use a dark background for a more dramatic effect
plt.style.use('dark_background')

# Create the barplot
sns.countplot(y='UN_Region', data=df, palette='viridis', edgecolor='black', linewidth=0.5)

# Customize the plot
plt.title('Number of Countries/Territories per UN Region', fontsize=16)
plt.xlabel('Count', fontsize=12)
plt.ylabel('UN Region', fontsize=12)

# Add a subtle grid for better readability
plt.grid(axis='x', linestyle='--', alpha=0.5)

# Customize spines
plt.gca().spines[['top', 'right']].set_visible(False)
plt.gca().spines['left'].set_visible(False) # Hide left spine
plt.gca().spines['bottom'].set_linewidth(1.5)  # Set bottom spine width

# Add annotations (optional)
for i, v in enumerate(df.groupby('UN_Region').size()):
    plt.text(v + 2, i, str(v), color='white', va='center')


# Enhance visual appeal
plt.tight_layout()  # Adjust layout to prevent labels from overlapping

plt.show()











# number of countries per region















#What is European Union[n 1]?









# Countries in Europe below avarege











## Which countries in Europe has higher GDP than UK?







"""## groupby()

[Learn more about groupby](https://www.geeksforgeeks.org/pandas-groupby/)
"""























"""## Which countries below average by IMF world estimate?"""







"""### IMF estimate 0 values"""









"""## Which country has highest UN Estimate?"""





"""## Which country has highest Worlbank Estimate?"""





"""## Which country has highest IMF Estimate?"""







"""## Filling 0 Values by average"""

import numpy as np

# replace 0 with null values



# Calculate the average of 'Worldbank_Estimate' and 'UN_Estimate' columns

# Fill the null values in 'imf' column with the calculated average



# Drop the temporary 'avg_worldbank_un' column if not needed



"""[Visit this link to learn more about ffill](https://www.w3schools.com/python/pandas/ref_df_ffill.asp)

[Visit this link to learn more about bfill](https://www.w3schools.com/python/pandas/ref_df_bfill.asp)

## Checking Missing Values
"""









"""## Visualization"""

import matplotlib.pyplot as plt
import seaborn as sns

"""### Histogram"""

df.hist(figsize=(10,8))
plt.show()

df[["IMF_Estimate", "UN_Estimate", "WorldBank_Estimate"]].hist(figsize=(12,9))

plt.show()

df[["IMF_Estimate", "UN_Estimate", "WorldBank_Estimate"]].hist(bins=10, figsize=(12,9))

plt.show()

df["WorldBank_Estimate"].agg(["min","max"])

234316/5
#1 bin size if bins=5

df[df["WorldBank_Estimate"]<=46863.2]["WorldBank_Estimate"].count()

234316/10
#1 bin size if bins not given any number

df[["IMF_Estimate", "UN_Estimate", "WorldBank_Estimate"]].hist(bins=3, figsize=(12,9))

plt.show()

df[["IMF_Estimate", "UN_Estimate", "WorldBank_Estimate"]].hist(bins=15, figsize=(15,12))

#23400/15 = 15300
plt.show()

"""### Correlation Heatmap"""

#creating correlation for the whole dataset - if you dont know the columns you are finding correlation for than you can run a wider search for numeric data
numerical_df = df.select_dtypes(include=[int, float])
corr = numerical_df.corr()

df[["IMF_Estimate", "UN_Estimate", "WorldBank_Estimate"]].corr()

corr = df[["IMF_Estimate", "UN_Estimate", "WorldBank_Estimate"]].corr()

plt.figure(figsize=(9,6))
sns.heatmap(corr)

plt.show()

corr = df[["IMF_Estimate", "UN_Estimate", "WorldBank_Estimate"]].corr()

plt.figure(figsize=(9,6))
sns.heatmap(corr, annot=True)

plt.show()

corr = df[["IMF_Estimate", "UN_Estimate", "WorldBank_Estimate"]].corr()

plt.figure(figsize=(9,6))

sns.heatmap(corr, annot=True, fmt=".2f", cmap = 'gist_yarg', annot_kws={"size": 12})

plt.show()

corr = df[["IMF_Estimate", "UN_Estimate", "WorldBank_Estimate"]].corr()

plt.figure(figsize=(9,6))

sns.heatmap(corr, annot=True, cmap = 'Purples')

plt.title("Correlation Map")


plt.show()

corr = df.select_dtypes(include=[int, float]).corr()

plt.figure(figsize=(9,6))

sns.heatmap(corr, annot=True, cmap = 'Purples')

plt.show()

"""### Bar plot"""

import seaborn as sns
import matplotlib.pyplot as plt

# Set figure size
fig = plt.figure(figsize=(8,5))

# Create a bar plot comparing IMF GDP estimates by region
sns.barplot(x="IMF_Estimate", y="UN_Region", data=df, ci="sd", palette="GnBu")

# Show the plot
plt.show()

df.head()

sns.barplot(x="UN_Region", y="WorldBank_Estimate", data=df, errorbar=None)

plt.show()

sns.barplot(x="WorldBank_Estimate", y="UN_Region", data=df, errorbar=None)

plt.show()

fig = plt.figure(figsize = (8,5))

ax = sns.barplot(x = "IMF_Estimate",  y = "UN_Region",
data = df, errorbar = None)

ax.bar_label(ax.containers[0])

plt.show()

fig = plt.figure(figsize = (8,5))
ax = sns.barplot(x = "UN_Region",  y = "IMF_Estimate",
                 data = df, errorbar = None)

ax.bar_label(ax.containers[0])


ax.set_title("Regions by IMF Estimate")
plt.show()



"""### Scatter Plot"""

df.plot(x='UN_Region', y='UN_Estimate', kind='scatter', alpha=0.7, color="green", edgecolor="black",
        figsize=(10,6),
        title="Scatter Plot")

plt.show()









"""### Boxplot and Outliers

![image.png](attachment:da6a7715-3b1c-4165-a2a9-4dc8ca096bd7.png)
"""

sns.boxplot(x=df["UN_Estimate"])

plt.show()

df[df["UN_Estimate"]>50000].head()

sns.boxplot(x=df["WorldBank_Estimate"])

plt.show()

sns.boxplot(x=df["IMF_Estimate"])

plt.show()

df[df["UN_Estimate"]>100000]

df.UN_Estimate.mean()

df.shape



import seaborn as sns
import matplotlib.pyplot as plt

# Create count plot excluding 'World' category
ax = sns.countplot(x="UN_Region", data=df[~(df.UN_Region=="World")], palette="Accent")

# Add count labels on top of bars
ax.bar_label(ax.containers[0])
for labels in ax.containers:
    ax.bar_label(labels)

# Add title
plt.title("Number of Countries in each continent")

#Add axis titles
plt.xlabel("UN Region")
plt.ylabel("Number of Countries")

# Set background color to light gray
ax.set_facecolor('papayawhip')

# Show plot
plt.show()

"""## Create another dataframe called data excluding  5 countries with highest UN estimate"""

data = df[-(df["UN_Estimate"]>100000)]

data.head()

data.shape

data.UN_Estimate.mean()

df.UN_Estimate.mean()

"""![image.png](attachment:image.png)"""

sns.boxplot(x=data["UN_Estimate"])
plt.show()

"""## Removing outliers

![image.png](attachment:da6a7715-3b1c-4165-a2a9-4dc8ca096bd7.png)

![image.png](attachment:image.png)
"""

lower_q = df["UN_Estimate"].quantile(0.25)
lower_q

higher_q = df["UN_Estimate"].quantile(0.75)
higher_q

iqr = higher_q - lower_q
iqr

upper_boundary = higher_q + 1.5 * iqr
upper_boundary

lower_boundary = lower_q - 1.5 * iqr
lower_boundary

df_filtered = df[(df["UN_Estimate"] < upper_boundary) & (df["UN_Estimate"] > lower_boundary)]

df_filtered.head()

df_filtered.shape
# there were 223 rows - 196 = 27 outliers dropped

df_filtered.UN_Estimate.mean()

df.UN_Estimate.mean()

#how can we create a table with following
df_filtered.WorldBank_Estimate.mean()

df.WorldBank_Estimate.mean()

df_filtered.IMF_Estimate.mean()

df.IMF_Estimate.mean()